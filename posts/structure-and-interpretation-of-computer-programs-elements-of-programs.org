#+begin_src dot :file  ../files/assets/posts/sicp/elements.png :cmdline -Kdot -Tpng :exports none
  digraph {
  resolution=192;
  rankdir=TB;
  splines=true;
  node [shape=box];
  overlap=scale;
  ratio=1;
subgraph cluster_elements{
  color=none;
  e [label="Elements"]
  e -> st [dir=none]
  e -> env [dir=none]
  e -> op [dir=none]
}




subgraph cluster_env {
  color=none;
  env [label="Environments" shape=diamond]
  var [label="Variables" shape=tripleoctagon]

  env -> var [dir=none]


  funcdef [label="Function\nDefinitions" shape=doublecircle style="dotted"]
  env -> funcdef [dir=none]
//  func -> function [dir=none]
  calland [label="and" style="dotted" shape=circle]
  function [label="Functions" shape=doublecircle]

  function -> calland [style="dotted" dir=none]
  arg [label="Arguments" shape=triangle regular=true width=2 fixedsize=true]
  arg -> calland [style="dotted" dir=none]
  calland -> call

  formpar [label="Formal\nParameters" shape=triangle regular=true width=2 fixedsize=true]
  fand [label="and" shape=circle style="dotted"]
  fand -> nonpure
  fand -> pure
  funcb [label="Function\nBody" shape=doublecircle]
  funcb -> fand [style="dotted" dir=none]
  formpar -> fand [style="dotted" dir=none]
  
  funcdef -> formpar [dir=none]
  funcdef -> funcb [dir=none]

  pure [label="Pure\nFunctions"]
  nonpure [label="Non-Pure\nFunctions"]
  pure -> function [dir=none]
  nonpure -> function[dir=none]

}
subgraph cluster_stat {
  color=none;
  st [label="Statements" shape=octagon]
  st -> sst [dir=none]
  sst [label="Simple\nStatements"  shape=octagon style="dashed"]

  ret [dir=none label="Return" shape=circle width=1.3 fixedsize=true]
//  goto [label="Goto" shape=circle width=1.3 fixedsize=true]
  assert [label="Assertion" shape=circle width=1.3 fixedsize=true]
  as [label="Assignment" shape=circle width=1.3 fixedsize=true]
  sst -> as [dir=none]
  sst -> ret [dir=none]
  sst -> exp [dir=none]
  sst -> assert [dir=none]
//  sst -> goto
  cst [label="Compound\nStatements" shape=octagon style="bold"]
  st -> cst [dir=none]

}
//subgraph cluster_op {
  color=none;

  con [label="flow\ncontrol" shape=doublecircle width=1.3 fixedsize=true]
  con -> op [dir=none]
  op [label="Operators" shape=doublecircle]
  with [label="with" shape=doublecircle width=1.3 fixedsize=true]
  con -> with [dir=none]
  cond [label="if\nelif\nelse" shape=doublecircle width=1.3 fixedsize=true]
  con -> cond [dir=none]
  iter [label="for\nwhile\ndo" shape=doublecircle width=1.3 fixedsize=true]
  con -> iter [dir=none]
  except [label="exception" shape=doublecircle width=1.3 fixedsize=true]
  con -> except [dir=none]

  flowand  [label="and" style="dotted" shape=circle]
  with -> flowand [style="dotted" dir=none]
  cond -> flowand [style="dotted" dir=none]
  iter -> flowand [style="dotted" dir=none]
  except -> flowand [style="dotted" dir=none]
  
  sst -> flowand[style="dotted" dir=none]
  flowand -> cst
  ar [label="arithmetic" shape=doublecircle width=1.3 fixedsize=true]
  op -> ar [dir=none]
  co [label="comparison" shape=doublecircle width=1.3 fixedsize=true]
  op -> co [dir=none]
  log [label="logical" shape=doublecircle width=1.3 fixedsize=true]
  op -> log [dir=none]
  assign [label="assignment" shape=doublecircle width=1.3 fixedsize=true]
  op -> assign [dir=none]
  oper [label="and" style="dotted" shape=circle]

  ar -> oper [style="dotted" dir=none]
  co -> oper [style="dotted" dir=none]
  log -> oper [style="dotted" dir=none]
//subgraph cluster_oper {
  pexp [label="Primitive\nExpressions" shape=triangle regular=true width=2 fixedsize=true]
  pexp -> oper [style="dotted" dir=none]
//}
  assign -> as [style="dotted" dir=none]
  oper -> cexp

  color=none;
subgraph cluster_exp {
  exp [label="Expressions"]

  cexp [label="Compound\nExpressions"]
  call [label="Call Expressions"]  
//  e -> st [dir=none label="imperative\nparadigm" color="#259359" fontcolor="#259359"]
//  e -> exp [dir=none label="declarative\nparadigm" color="#0d53a3" fontcolor="#0d53a3"]
  exp -> cexp [dir=none]
  exp -> pexp [dir=none]
  cexp -> call [dir=none]  
//}

}

  }
#+end_src

#+RESULTS:
[[file:../files/assets/posts/sicp/elements.png]]






[[../../assets/posts/sicp/elements.png]]


